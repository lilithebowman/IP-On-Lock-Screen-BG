name: Build and Release

on:
  # Trigger on version tags
  push:
    tags:
      - 'v*'
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore IPLockScreenService.csproj
      
    - name: Build main service
      run: dotnet publish IPLockScreenService.csproj -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true
      
    - name: Build test runner
      run: dotnet publish TestRunner.csproj -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -o bin\test
      
    - name: Sign executables (if certificate available)
      run: |
        # Check if code signing certificate is available
        if ($env:CERTIFICATE_BASE64 -and $env:CERTIFICATE_PASSWORD) {
          Write-Host "Code signing certificate found, signing executables..."
          
          # Decode certificate
          $certBytes = [Convert]::FromBase64String($env:CERTIFICATE_BASE64)
          $certPath = "certificate.p12"
          [System.IO.File]::WriteAllBytes($certPath, $certBytes)
          
          # Sign main service
          if (Test-Path "bin\Release\net8.0-windows\win-x64\publish\IPLockScreenService.exe") {
            & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe" sign /f $certPath /p $env:CERTIFICATE_PASSWORD /t http://timestamp.digicert.com /fd SHA256 "bin\Release\net8.0-windows\win-x64\publish\IPLockScreenService.exe"
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✅ Successfully signed IPLockScreenService.exe"
            } else {
              Write-Host "❌ Failed to sign IPLockScreenService.exe"
            }
          }
          
          # Sign test runner
          if (Test-Path "bin\test\TestRunner.exe") {
            & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe" sign /f $certPath /p $env:CERTIFICATE_PASSWORD /t http://timestamp.digicert.com /fd SHA256 "bin\test\TestRunner.exe"
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✅ Successfully signed TestRunner.exe"
            } else {
              Write-Host "❌ Failed to sign TestRunner.exe"
            }
          }
          
          # Clean up certificate file
          Remove-Item $certPath -Force
        } elseif ($env:USE_SELF_SIGNED -eq "true") {
          Write-Host "Creating self-signed certificate for development..."
          
          # Create self-signed certificate
          $cert = New-SelfSignedCertificate -Type CodeSigningCert -Subject "CN=IP Lock Screen Service" -KeyAlgorithm RSA -KeyLength 2048 -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" -KeyExportPolicy Exportable -KeyUsage DigitalSignature -ValidityPeriod Years -ValidityPeriodUnits 3 -CertStoreLocation "Cert:\CurrentUser\My"
          
          # Export certificate
          $certPath = "self-signed-cert.p12"
          $certPassword = ConvertTo-SecureString -String "temp123" -Force -AsPlainText
          Export-PfxCertificate -Cert $cert -FilePath $certPath -Password $certPassword
          
          # Sign executables
          if (Test-Path "bin\Release\net8.0-windows\win-x64\publish\IPLockScreenService.exe") {
            & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe" sign /f $certPath /p "temp123" /t http://timestamp.digicert.com /fd SHA256 "bin\Release\net8.0-windows\win-x64\publish\IPLockScreenService.exe"
            Write-Host "⚠️ Self-signed IPLockScreenService.exe (not trusted by Windows)"
          }
          
          if (Test-Path "bin\test\TestRunner.exe") {
            & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe" sign /f $certPath /p "temp123" /t http://timestamp.digicert.com /fd SHA256 "bin\test\TestRunner.exe"
            Write-Host "⚠️ Self-signed TestRunner.exe (not trusted by Windows)"
          }
          
          # Clean up
          Remove-Item $certPath -Force
          Remove-Item -Path "Cert:\CurrentUser\My\$($cert.Thumbprint)" -Force
        } else {
          Write-Host "No code signing certificate available, skipping signing..."
          Write-Host ""
          Write-Host "📋 To enable code signing:"
          Write-Host "   Option 1 (Recommended): Purchase a certificate from a trusted CA"
          Write-Host "   - Add CERTIFICATE_BASE64 and CERTIFICATE_PASSWORD secrets"
          Write-Host ""
          Write-Host "   Option 2 (Development): Use self-signed certificate"
          Write-Host "   - Add USE_SELF_SIGNED=true as a repository variable"
          Write-Host ""
          Write-Host "   Option 3: Free certificate from SSL.com (limited)"
          Write-Host "   - Get a free 90-day certificate from SSL.com"
        }
      shell: powershell
      env:
        CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
        CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        USE_SELF_SIGNED: ${{ vars.USE_SELF_SIGNED }}
      
    - name: Create release directory
      run: |
        mkdir release
        Copy-Item "bin\Release\net8.0-windows\win-x64\publish\IPLockScreenService.exe" "release\"
        Copy-Item "bin\test\TestRunner.exe" "release\"
        Copy-Item "README.md" "release\"
        Copy-Item "SECURITY.md" "release\"
        Copy-Item "install-service.bat" "release\"
        Copy-Item "uninstall-service.bat" "release\"
        Copy-Item "service-manager.ps1" "release\"
        Copy-Item "appsettings.json" "release\"
      shell: powershell
      
    - name: Get version from tag
      id: get_version
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.version }}"
        } else {
          $version = "${{ github.ref_name }}"
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
      shell: powershell
      
    - name: Create ZIP archive
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        Compress-Archive -Path "release\*" -DestinationPath "IP-Lock-Screen-BG-$version.zip"
      shell: powershell
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: IP Lock Screen Background Service ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## IP Lock Screen Background Service ${{ steps.get_version.outputs.VERSION }}
          
          A Windows service that automatically updates the Windows lock screen background with current network configuration information.
          
          > **Note**: This software is open source and the executables are built using GitHub Actions. Windows may show security warnings because the executables are not code-signed. You can safely allow/unblock the files after download.
          
          ### Security Information
          - Source code is publicly available at: https://github.com/lilithebowman/IP-On-Lock-Screen-BG
          - Built using GitHub Actions for transparency
          - Self-contained .NET 8.0 executables (no external dependencies)
          - No network communication except for local IP configuration gathering
          
          ### What's Included
          - `IPLockScreenService.exe` - Main service executable
          - `TestRunner.exe` - Test runner for manual testing
          - `install-service.bat` - Service installation script (run as administrator)
          - `uninstall-service.bat` - Service removal script (run as administrator)
          - `service-manager.ps1` - PowerShell service management script
          - `appsettings.json` - Configuration file
          - `README.md` - Documentation
          
          ### Installation
          1. Extract all files to a directory
          2. Right-click `install-service.bat` and select "Run as administrator"
          3. The service will be installed and started automatically
          
          ### Requirements
          - Windows 10/11
          - Administrator privileges for installation
          - .NET 8.0 Runtime (included in self-contained deployment)
          
          ### Changes
          See the commit history for detailed changes in this release.
        files: IP-Lock-Screen-BG-${{ steps.get_version.outputs.VERSION }}.zip
        draft: false
        prerelease: false
